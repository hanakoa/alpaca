version: 2
jobs:
  build:
    docker:
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.10.3
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      # https://circleci.com/docs/2.0/circleci-images/#postgresql
      - image: circleci/postgres:10.4-alpine
        name: alpaca-auth-db
        environment:
          POSTGRES_USER: alpaca
          POSTGRES_PASSWORD: password
          POSTGRES_DB: alpaca_auth_test
      - image: circleci/postgres:10.4-alpine
        name: alpaca-password-reset-db
        environment:
          POSTGRES_USER: alpaca
          POSTGRES_PASSWORD: password
          POSTGRES_DB: alpaca_password_reset_test

    working_directory: /go/src/github.com/hanakoa/alpaca

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS

      - restore_cache:
          keys:
            - v1-pkg-cache

      - run:
          name: Waiting for all Postgres instances to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z alpaca-auth-db 5432 && nc -z alpaca-password-reset-db 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1

      - run: sudo apt update && sudo apt install postgresql-client
      - run:
          name: Seeding Databases
          command: |
            echo "alpaca-auth-db:5432:alpaca_auth_test:alpaca:password" > ~/.pgpass
            psql --host alpaca-auth-db -U alpaca -d alpaca_auth_test < scripts/seed-data-auth.sql
            echo "alpaca-password-reset-db:5432:alpaca_password_reset_test:alpaca:password" > ~/.pgpass
            psql --host alpaca-password-reset-db -U alpaca -d alpaca_password_reset_test < scripts/seed-data-password-reset.sql

      # Normally, this step would be in a custom primary image;
      # we've added it here for the sake of explanation.
      - run:
          name: Fetching dependencies
          command: go get -v ./...
      - run:
          name: Run unit tests
          environment:
            CONTACTS_DB_URL: "postgres://circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            make test | tee ${TEST_RESULTS}/go-test.out

      - run: make build

      - save_cache:
          key: v1-pkg-cache
          paths:
            - "/go/pkg"

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results